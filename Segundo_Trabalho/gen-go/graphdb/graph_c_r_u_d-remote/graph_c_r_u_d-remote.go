// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"graphdb"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void createVertex(GraphVertex vertex)")
	fmt.Fprintln(os.Stderr, "  GraphVertex readVertex(int name)")
	fmt.Fprintln(os.Stderr, "  void deleteVertex(int name)")
	fmt.Fprintln(os.Stderr, "  void updateVertex(GraphVertex vertex)")
	fmt.Fprintln(os.Stderr, "  void createEdge(GraphEdge edge)")
	fmt.Fprintln(os.Stderr, "  GraphEdge readEdge(int firstVertex, int secondVertex)")
	fmt.Fprintln(os.Stderr, "  void deleteEdge(GraphEdge edge)")
	fmt.Fprintln(os.Stderr, "  void updateEdge(GraphEdge edge)")
	fmt.Fprintln(os.Stderr, "   findEdgesOfVertex(int name)")
	fmt.Fprintln(os.Stderr, "   findNeighbours(int name)")
	fmt.Fprintln(os.Stderr, "  void deleteEdgesOfVertex(int name)")
	fmt.Fprintln(os.Stderr, "  void deleteEdgeColateral(GraphEdge edge)")
	fmt.Fprintln(os.Stderr, "  void updateEdgeColateral(GraphEdge edge)")
	fmt.Fprintln(os.Stderr, "   findNeighboursRemote(int name)")
	fmt.Fprintln(os.Stderr, "  Graph getGraph()")
	fmt.Fprintln(os.Stderr, "  double shortestPath(int source, int target)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := graphdb.NewGraphCRUDClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "createVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateVertex requires 1 args")
			flag.Usage()
		}
		arg71 := flag.Arg(1)
		mbTrans72 := thrift.NewTMemoryBufferLen(len(arg71))
		defer mbTrans72.Close()
		_, err73 := mbTrans72.WriteString(arg71)
		if err73 != nil {
			Usage()
			return
		}
		factory74 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt75 := factory74.GetProtocol(mbTrans72)
		argvalue0 := graphdb.NewGraphVertex()
		err76 := argvalue0.Read(jsProt75)
		if err76 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateVertex(value0))
		fmt.Print("\n")
		break
	case "readVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReadVertex requires 1 args")
			flag.Usage()
		}
		tmp0, err77 := (strconv.Atoi(flag.Arg(1)))
		if err77 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.ReadVertex(value0))
		fmt.Print("\n")
		break
	case "deleteVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteVertex requires 1 args")
			flag.Usage()
		}
		tmp0, err78 := (strconv.Atoi(flag.Arg(1)))
		if err78 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.DeleteVertex(value0))
		fmt.Print("\n")
		break
	case "updateVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateVertex requires 1 args")
			flag.Usage()
		}
		arg79 := flag.Arg(1)
		mbTrans80 := thrift.NewTMemoryBufferLen(len(arg79))
		defer mbTrans80.Close()
		_, err81 := mbTrans80.WriteString(arg79)
		if err81 != nil {
			Usage()
			return
		}
		factory82 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt83 := factory82.GetProtocol(mbTrans80)
		argvalue0 := graphdb.NewGraphVertex()
		err84 := argvalue0.Read(jsProt83)
		if err84 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateVertex(value0))
		fmt.Print("\n")
		break
	case "createEdge":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
			flag.Usage()
		}
		arg85 := flag.Arg(1)
		mbTrans86 := thrift.NewTMemoryBufferLen(len(arg85))
		defer mbTrans86.Close()
		_, err87 := mbTrans86.WriteString(arg85)
		if err87 != nil {
			Usage()
			return
		}
		factory88 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt89 := factory88.GetProtocol(mbTrans86)
		argvalue0 := graphdb.NewGraphEdge()
		err90 := argvalue0.Read(jsProt89)
		if err90 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateEdge(value0))
		fmt.Print("\n")
		break
	case "readEdge":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ReadEdge requires 2 args")
			flag.Usage()
		}
		tmp0, err91 := (strconv.Atoi(flag.Arg(1)))
		if err91 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		tmp1, err92 := (strconv.Atoi(flag.Arg(2)))
		if err92 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := graphdb.Int(argvalue1)
		fmt.Print(client.ReadEdge(value0, value1))
		fmt.Print("\n")
		break
	case "deleteEdge":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteEdge requires 1 args")
			flag.Usage()
		}
		arg93 := flag.Arg(1)
		mbTrans94 := thrift.NewTMemoryBufferLen(len(arg93))
		defer mbTrans94.Close()
		_, err95 := mbTrans94.WriteString(arg93)
		if err95 != nil {
			Usage()
			return
		}
		factory96 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt97 := factory96.GetProtocol(mbTrans94)
		argvalue0 := graphdb.NewGraphEdge()
		err98 := argvalue0.Read(jsProt97)
		if err98 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteEdge(value0))
		fmt.Print("\n")
		break
	case "updateEdge":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateEdge requires 1 args")
			flag.Usage()
		}
		arg99 := flag.Arg(1)
		mbTrans100 := thrift.NewTMemoryBufferLen(len(arg99))
		defer mbTrans100.Close()
		_, err101 := mbTrans100.WriteString(arg99)
		if err101 != nil {
			Usage()
			return
		}
		factory102 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt103 := factory102.GetProtocol(mbTrans100)
		argvalue0 := graphdb.NewGraphEdge()
		err104 := argvalue0.Read(jsProt103)
		if err104 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateEdge(value0))
		fmt.Print("\n")
		break
	case "findEdgesOfVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindEdgesOfVertex requires 1 args")
			flag.Usage()
		}
		tmp0, err105 := (strconv.Atoi(flag.Arg(1)))
		if err105 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.FindEdgesOfVertex(value0))
		fmt.Print("\n")
		break
	case "findNeighbours":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindNeighbours requires 1 args")
			flag.Usage()
		}
		tmp0, err106 := (strconv.Atoi(flag.Arg(1)))
		if err106 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.FindNeighbours(value0))
		fmt.Print("\n")
		break
	case "deleteEdgesOfVertex":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteEdgesOfVertex requires 1 args")
			flag.Usage()
		}
		tmp0, err107 := (strconv.Atoi(flag.Arg(1)))
		if err107 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.DeleteEdgesOfVertex(value0))
		fmt.Print("\n")
		break
	case "deleteEdgeColateral":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteEdgeColateral requires 1 args")
			flag.Usage()
		}
		arg108 := flag.Arg(1)
		mbTrans109 := thrift.NewTMemoryBufferLen(len(arg108))
		defer mbTrans109.Close()
		_, err110 := mbTrans109.WriteString(arg108)
		if err110 != nil {
			Usage()
			return
		}
		factory111 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt112 := factory111.GetProtocol(mbTrans109)
		argvalue0 := graphdb.NewGraphEdge()
		err113 := argvalue0.Read(jsProt112)
		if err113 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteEdgeColateral(value0))
		fmt.Print("\n")
		break
	case "updateEdgeColateral":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateEdgeColateral requires 1 args")
			flag.Usage()
		}
		arg114 := flag.Arg(1)
		mbTrans115 := thrift.NewTMemoryBufferLen(len(arg114))
		defer mbTrans115.Close()
		_, err116 := mbTrans115.WriteString(arg114)
		if err116 != nil {
			Usage()
			return
		}
		factory117 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt118 := factory117.GetProtocol(mbTrans115)
		argvalue0 := graphdb.NewGraphEdge()
		err119 := argvalue0.Read(jsProt118)
		if err119 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateEdgeColateral(value0))
		fmt.Print("\n")
		break
	case "findNeighboursRemote":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindNeighboursRemote requires 1 args")
			flag.Usage()
		}
		tmp0, err120 := (strconv.Atoi(flag.Arg(1)))
		if err120 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		fmt.Print(client.FindNeighboursRemote(value0))
		fmt.Print("\n")
		break
	case "getGraph":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetGraph requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetGraph())
		fmt.Print("\n")
		break
	case "shortestPath":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ShortestPath requires 2 args")
			flag.Usage()
		}
		tmp0, err121 := (strconv.Atoi(flag.Arg(1)))
		if err121 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := graphdb.Int(argvalue0)
		tmp1, err122 := (strconv.Atoi(flag.Arg(2)))
		if err122 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := graphdb.Int(argvalue1)
		fmt.Print(client.ShortestPath(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
