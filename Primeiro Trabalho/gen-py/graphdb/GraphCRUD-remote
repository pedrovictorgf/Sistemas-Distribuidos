#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from graphdb import GraphCRUD
from graphdb.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void createVertex(GraphVertex vertex)'
  print '  GraphVertex readVertex(int name)'
  print '  void deleteVertex(int name)'
  print '  void updateVertex(GraphVertex vertex)'
  print '  void createEdge(int firstVertex, int secondVertex, double weight, bool isBidirectional, string description)'
  print '  GraphEdge readEdge(int firstVertex, int secondVertex)'
  print '  void deleteEdge(int firstVertex, int secondVertex)'
  print '  void updateEdge(int firstVertex, int secondVertex, double weight, bool isBidirectional, string description)'
  print '   findEdgesOfVertex(int vertex)'
  print '   findNeighbours(int vertex)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = GraphCRUD.Client(protocol)
transport.open()

if cmd == 'createVertex':
  if len(args) != 1:
    print 'createVertex requires 1 args'
    sys.exit(1)
  pp.pprint(client.createVertex(eval(args[0]),))

elif cmd == 'readVertex':
  if len(args) != 1:
    print 'readVertex requires 1 args'
    sys.exit(1)
  pp.pprint(client.readVertex(eval(args[0]),))

elif cmd == 'deleteVertex':
  if len(args) != 1:
    print 'deleteVertex requires 1 args'
    sys.exit(1)
  pp.pprint(client.deleteVertex(eval(args[0]),))

elif cmd == 'updateVertex':
  if len(args) != 1:
    print 'updateVertex requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateVertex(eval(args[0]),))

elif cmd == 'createEdge':
  if len(args) != 5:
    print 'createEdge requires 5 args'
    sys.exit(1)
  pp.pprint(client.createEdge(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'readEdge':
  if len(args) != 2:
    print 'readEdge requires 2 args'
    sys.exit(1)
  pp.pprint(client.readEdge(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteEdge':
  if len(args) != 2:
    print 'deleteEdge requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteEdge(eval(args[0]),eval(args[1]),))

elif cmd == 'updateEdge':
  if len(args) != 5:
    print 'updateEdge requires 5 args'
    sys.exit(1)
  pp.pprint(client.updateEdge(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],))

elif cmd == 'findEdgesOfVertex':
  if len(args) != 1:
    print 'findEdgesOfVertex requires 1 args'
    sys.exit(1)
  pp.pprint(client.findEdgesOfVertex(eval(args[0]),))

elif cmd == 'findNeighbours':
  if len(args) != 1:
    print 'findNeighbours requires 1 args'
    sys.exit(1)
  pp.pprint(client.findNeighbours(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
